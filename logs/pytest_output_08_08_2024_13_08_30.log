Logging is configured.
======================================================= test session starts ========================================================
platform win32 -- Python 3.12.4, pytest-8.3.2, pluggy-1.5.0
rootdir: C:\Users\150194\OneDrive - Arrow Electronics, Inc\Documents\Python\pytest-project
configfile: pytest.ini
plugins: allure-pytest-2.13.5, html-4.1.1, html-reporter-0.2.9, metadata-3.1.1
collected 12 items

tests/api/test_api_todo_pixegami.py::test_api_get getting response message

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:31 INFO getting response message
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "GET / HTTP/11" 200 39
{'message': 'Hello World from Todo API'}
200
PASSED
tests/api/test_api_todo_pixegami.py::test_api_put_create_task Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "PUT /create-task HTTP/11" 200 187
{'task': {'user_id': 'Test User 1', 'content': 'My test content with json file.', 'is_done': False, 'created_time': 1723102714, 'task_id': 'task_4a01692a43b74ddba59ef4a7bff66101', 'ttl': 1723189114}}
task_4a01692a43b74ddba59ef4a7bff66101
Created new task with id: task_4a01692a43b74ddba59ef4a7bff66101

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:37 INFO Created new task with id: task_4a01692a43b74ddba59ef4a7bff66101
200
PASSED
tests/api/test_api_todo_pixegami.py::test_api_put_create_task_invalid_data_type Creating task with invalid data type.

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:37 INFO Creating task with invalid data type.
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "PUT /create-task HTTP/11" 422 111
<Response [422]>
{'detail': [{'loc': ['body', 'is_done'], 'msg': 'value could not be parsed to a boolean', 'type': 'type_error.bool'}]}
value could not be parsed to a boolean
422
PASSED
tests/api/test_api_todo_pixegami.py::test_api_put_create_task_missing_required_field Creating task with missing one of required field.

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:38 INFO Creating task with missing one of required field.
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "PUT /create-task HTTP/11" 422 91
<Response [422]>
{'detail': [{'loc': ['body', 'content'], 'msg': 'field required', 'type': 'value_error.missing'}]}
field required
422
PASSED
tests/api/test_api_todo_pixegami.py::test_api_put_create_task_invalid_creationtime SKIPPED (unconditional skip)
tests/api/test_api_todo_pixegami.py::test_api_get_task_by_id task_4a01692a43b74ddba59ef4a7bff66101
Get task by task id: task_4a01692a43b74ddba59ef4a7bff66101

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:39 INFO Get task by task id: task_4a01692a43b74ddba59ef4a7bff66101
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "GET /get-task/task_4a01692a43b74ddba59ef4a7bff66101 HTTP/11" 200 178
{'is_done': False, 'content': 'My test content with json file.', 'ttl': 1723189114, 'user_id': 'Test User 1', 'task_id': 'task_4a01692a43b74ddba59ef4a7bff66101', 'created_time': 1723102714}
200
PASSED
tests/api/test_api_todo_pixegami.py::test_api_get_task_by_id_not_exist Get task by task id: 1000 which is not present.

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:40 INFO Get task by task id: 1000 which is not present.
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "GET /get-task/1000 HTTP/11" 404 32
{'detail': 'Task 1000 not found'}
404
PASSED
tests/api/test_api_todo_pixegami.py::test_api_get_task_by_user_id Get task by user id: Test User 1

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:41 INFO Get task by user id: Test User 1
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "GET /list-tasks/Test%20User%201 HTTP/11" 200 1040
{'tasks': [{'is_done': False, 'content': 'My test content with json file.', 'ttl': 1723189114, 'user_id': 'Test User 1', 'task_id': 'task_4a01692a43b74ddba59ef4a7bff66101', 'created_time': 1723102714}, {'is_done': False, 'content': 'My test content.', 'ttl': 1723120810, 'user_id': 'Test User 1', 'task_id': 'task_c937175d045e4564ae4e0eb2e33e28da', 'created_time': 1723034410}, {'is_done': False, 'content': 'My test content.', 'ttl': 1723117717, 'user_id': 'Test User 1', 'task_id': 'task_883165fcf2854406b47d17dcaf34ea55', 'created_time': 1723031317}, {'is_done': False, 'content': 'My test content with json file.', 'ttl': 1723117711, 'user_id': 'Test User 1', 'task_id': 'task_37bea58ba4764126bf703e9286961b3c', 'created_time': 1723031311}, {'is_done': False, 'content': 'My test content.', 'ttl': 1723117594, 'user_id': 'Test User 1', 'task_id': 'task_af356dfedc9a45b6bd47ce99055ae4fa', 'created_time': 1723031194}, {'is_done': False, 'content': 'My test content with json file.', 'ttl': 1723117589, 'user_id': 'Test User 1', 'task_id': 'task_c193cfca7e2c463ab74c0ccaba1a56db', 'created_time': 1723031189}]}
200
PASSED
tests/api/test_api_todo_pixegami.py::test_api_update_task Update task with id: task_4a01692a43b74ddba59ef4a7bff66101

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:42 INFO Update task with id: task_4a01692a43b74ddba59ef4a7bff66101
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "PUT /update-task HTTP/11" 200 31
{'updated_task_id': 'task_id 5'}
200
Get task with id: task_id 5 and validate update task
2024-08-08 13:08:43 INFO Get task with id: task_id 5 and validate update task
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "GET /get-task/task_id%205 HTTP/11" 200 76
{'content': 'Updated content with json', 'is_done': True, 'task_id': 'task_id 5'}
PASSED
tests/api/test_api_todo_pixegami.py::test_api_update_task_missing_task_id Update task without task id.

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:44 INFO Update task without task id.
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "PUT /update-task HTTP/11" 500 21
FAILED
tests/api/test_api_todo_pixegami.py::test_api_update_task_creation_time SKIPPED (unconditional skip)
tests/api/test_api_todo_pixegami.py::test_api_del_task_by_id Delete task with id: task_4a01692a43b74ddba59ef4a7bff66101

---------------------------------------------------------- live log call -----------------------------------------------------------
2024-08-08 13:08:46 INFO Delete task with id: task_4a01692a43b74ddba59ef4a7bff66101
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "DELETE /delete-task/task_4a01692a43b74ddba59ef4a7bff66101 HTTP/11" 200 59
{'deleted_task_id': 'task_4a01692a43b74ddba59ef4a7bff66101'}
200
Validate task is deleted or not.
2024-08-08 13:08:47 INFO Validate task is deleted or not.
Starting new HTTPS connection (1): todo.pixegami.io:443
https://todo.pixegami.io:443 "GET /get-task/task_4a01692a43b74ddba59ef4a7bff66101 HTTP/11" 404 65
{'detail': 'Task task_4a01692a43b74ddba59ef4a7bff66101 not found'}
404
PASSED

============================================================= FAILURES =============================================================
_______________________________________________ test_api_update_task_missing_task_id _______________________________________________

self = <Response [500]>, kwargs = {}

    def json(self, **kwargs):
        r"""Returns the json-encoded content of a response, if any.
    
        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
        :raises requests.exceptions.JSONDecodeError: If the response body does not
            contain valid json.
        """
    
        if not self.encoding and self.content and len(self.content) > 3:
            # No encoding set. JSON RFC 4627 section 3 states we should expect
            # UTF-8, -16 or -32. Detect which one to use; If the detection or
            # decoding fails, fall back to `self.text` (using charset_normalizer to make
            # a best guess).
            encoding = guess_json_utf(self.content)
            if encoding is not None:
                try:
                    return complexjson.loads(self.content.decode(encoding), **kwargs)
                except UnicodeDecodeError:
                    # Wrong UTF codec detected; usually because it's not UTF-8
                    # but some other 8-bit codec.  This is an RFC violation,
                    # and the server didn't bother to tell us what codec *was*
                    # used.
                    pass
                except JSONDecodeError as e:
                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
    
        try:
>           return complexjson.loads(self.text, **kwargs)

API_VENV\Lib\site-packages\requests\models.py:974: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
C:\Program Files\Python312\Lib\json\__init__.py:346: in loads
    return _default_decoder.decode(s)
C:\Program Files\Python312\Lib\json\decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x00000246910E1310>, s = 'Internal Server Error', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

C:\Program Files\Python312\Lib\json\decoder.py:355: JSONDecodeError

During handling of the above exception, another exception occurred:

    def test_api_update_task_missing_task_id():
        Logger.info("Update task without task id.")
        response = HelperClass.update_task(json_payload["update_missing_task_id_payload"])
>       response_data = response.json()

tests\api\test_api_todo_pixegami.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Response [500]>, kwargs = {}

    def json(self, **kwargs):
        r"""Returns the json-encoded content of a response, if any.
    
        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
        :raises requests.exceptions.JSONDecodeError: If the response body does not
            contain valid json.
        """
    
        if not self.encoding and self.content and len(self.content) > 3:
            # No encoding set. JSON RFC 4627 section 3 states we should expect
            # UTF-8, -16 or -32. Detect which one to use; If the detection or
            # decoding fails, fall back to `self.text` (using charset_normalizer to make
            # a best guess).
            encoding = guess_json_utf(self.content)
            if encoding is not None:
                try:
                    return complexjson.loads(self.content.decode(encoding), **kwargs)
                except UnicodeDecodeError:
                    # Wrong UTF codec detected; usually because it's not UTF-8
                    # but some other 8-bit codec.  This is an RFC violation,
                    # and the server didn't bother to tell us what codec *was*
                    # used.
                    pass
                except JSONDecodeError as e:
                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
    
        try:
            return complexjson.loads(self.text, **kwargs)
        except JSONDecodeError as e:
            # Catch JSON-related errors and raise as requests.JSONDecodeError
            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError
>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

API_VENV\Lib\site-packages\requests\models.py:978: JSONDecodeError
-------------------------------------------------------- Captured log call ---------------------------------------------------------
2024-08-08 13:08:44 INFO Update task without task id.
===================================================== short test summary info ======================================================
FAILED tests/api/test_api_todo_pixegami.py::test_api_update_task_missing_task_id - requests.exceptions.JSONDecodeError: Expecting ...
============================================= 1 failed, 9 passed, 2 skipped in 18.02s ==============================================
